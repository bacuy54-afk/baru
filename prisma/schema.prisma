// Prisma schema tailored for ACCOUNT-based digital products (Netflix/YouTube/Spotify seats)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ganti ke "sqlite" kalau mau dev lokal tanpa PG
  url      = env("DATABASE_URL")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Int
  originalPrice Int?
  category      String?
  image         String?
  features      String[] @default([])
  tags          String[] @default([])
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  /// ðŸ†• featured controls for homepage
  featured      Boolean @default(false)
  featuredOrder Int?

  // relations
  plans      ProductPlan[]
  orderItems OrderItem[]
}

model ProductPlan {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id])

  label    String // e.g. "1 Bulan", "3 Bulan"
  price    Int
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String        @id @default(cuid())
  buyerName     String
  buyerContact  String // nomor whatsapp atau email
  note          String?
  total         Int
  createdAt     DateTime      @default(now())
  items         OrderItem[]
  orderStatus   OrderStatus
  paymentStatus PaymentStatus
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  qty        Int
  price      Int
  Assignment Assignment?
}

model InventoryAccount {
  id          String        @id @default(cuid())
  provider    String
  usernameEnc String // encrypted
  passwordEnc String // encrypted
  noteEnc     String? // encrypted (opsional: PIN/profil)
  seatsTotal  Int           @default(1)
  seatsUsed   Int           @default(0)
  status      AccountStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  seats Seat[]
}

model Seat {
  id         String           @id @default(cuid())
  accountId  String
  account    InventoryAccount @relation(fields: [accountId], references: [id])
  label      String? // e.g., "Profile 2", "Slot B"
  isAssigned Boolean          @default(false)
  assignedAt DateTime?
  disabled   Boolean          @default(false)

  // FIX: one-to-many (1 seat bisa punya banyak assignment sepanjang waktu/riwayat)
  assignments Assignment[]
}

model Assignment {
  id String @id @default(cuid())

  // Satu assignment untuk satu order item (unik)
  orderItemId String    @unique
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  seatId String
  seat   Seat   @relation(fields: [seatId], references: [id])

  expiresAt  DateTime
  revealedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  revealTokens RevealToken[]

  @@index([seatId]) // agar query by seat cepat
}

model RevealToken {
  id           String     @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])
  token        String     @unique
  expiresAt    DateTime
  usedAt       DateTime?
  createdAt    DateTime   @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
  FULFILLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum AccountStatus {
  ACTIVE
  PAUSED
  BANNED
}
